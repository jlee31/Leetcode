# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        visited = []
        tmp = head
        while tmp:
            if tmp in visited:
                return True
            else:
                visited.append(tmp)
                tmp = tmp.next
        return False

 # Faster Solution but still slow

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        visited = set()
        tmp = head
        while tmp:
            if tmp in visited:
                return True
            else:
                visited.add(tmp)
                tmp = tmp.next
        return False

# Better

 dummy = ListNode()
        dummy.next = head
        slow = fast = dummy

        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if slow is fast:
                return True
        return False
        # o(n)
