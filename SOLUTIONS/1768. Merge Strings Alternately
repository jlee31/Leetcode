class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        res = []
        n1 = len(word1)
        n2 = len(word2)

        if n1 >= n2:
            for i in range(n2):
                res.append(str(word1[i]))
                res.append(str(word2[i]))
            res = ''.join(res)
            return res + word1[n2:]
        else:
            for i in range(n1):
                res.append(str(word1[i]))
                res.append(str(word2[i]))

            res = ''.join(res)
            return res + word2[n1:]

# VERSION 2 With Slightly faster runtime

class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        n1, n2 = len(word1), len(word2)
        a, b = 0, 0
        s = []
        word = 1
        while a < n1 and b < n2:
            if word == 1:
                s.append(word1[a])
                a += 1
                word = 2
            if word == 2:
                s.append(word2[b])
                b += 1
                word = 1
        while  a < n1:
            s.append(word1[a])
            a += 1
        while  b < n2:
            s.append(word2[b])
            b += 1
        
        return ''.join(s)

# This version is faster with O(n1 + n2) runtime
        
        
