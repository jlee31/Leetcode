Solution 1: (Kinda slow hmm)
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        collection = {}
        for key, value in enumerate(magazine):
            if value in collection:
                collection[value] += 1
            else:
                collection[value] = 1

        for i in ransomNote:
            if i in collection:
                collection[i] -= 1
                if collection[i] < 0:
                    return False
            else:
                return False
        return True

Solution 2: (Slightly Faster)
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        counter = {}
        for c in magazine:
            if c in counter:
                counter[c] += 1
            else:
                counter[c] = 1

        for c in ransomNote:
            if c not in counter:
                return False
            elif counter[c] == 1:
                del counter[c]
            else:
                counter[c] -= 1

Solution 3: Faster (using defaultdict)
from collections import defaultdict
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        
        counter = defaultdict(int)
        for c in magazine:
            counter[c] += 1

        for c in ransomNote:
            if c not in counter:
                return False
            elif counter[c] == 1:
                del counter[c]
            else:
                counter[c] -= 1

        return True
        # Time: O(m+n)
        # Space: O(m)


        return True
        # Time: O(m+n)
        # Space: O(m)

Solution 4: Even Faster
from collections import Counter
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:

        counter = Counter(magazine)

        for c in ransomNote:
            if c not in counter:
                return False
            elif counter[c] == 1:
                del counter[c]
            else:
                counter[c] -= 1

        return True
        # Time: O(m+n)
        # Space: O(m)

