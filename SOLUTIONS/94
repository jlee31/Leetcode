# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[int]
        """
        # if root is None:
        #     return []

        # return (
        #     self.inorderTraversal(root.left) +
        #     [root.val] +
        #     self.inorderTraversal(root.right)
        # )

        # def helper(node, res):
        #     if node:
        #         helper(node.left, res)
        #         res.append(node.val)
        #         helper(node.right, res)

        # result = []
        # helper(root, result)
        # return result

        res = []
        stack = []
        curr = root
        while curr is not None or stack:
            while curr is not None:
                stack.append(curr)
                curr = curr.left
            curr = stack.pop()
            res.append(curr.val)
            curr = curr.right
        return res
